{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "```python\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = ''\n    balance = 0\n\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        current_group += char\n\n        if balance == 0:\n            result.append(current_group.replace(' ', ''))\n            current_group = ''\n    \n    return [group for group in result if group != '']\n\nprint(separate_paren_groups('( ) (( )) (( )( ))'))\n```"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    if not numbers:\n        return result\n    \n    for num in numbers[:-1]:\n        result.append(num)\n        result.append(delimeter)\n    result.append(numbers[-1])\n    \n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    current_level = 0\n    max_level = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n\n        if char == ' ':\n            levels.append(max_level)\n            current_level = 0\n            max_level = 0\n\n    levels.append(max_level)\n\n    return levels"}
{"task_id": "HumanEval/7", "completion": "    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n\n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "completion": "    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers"}
{"task_id": "HumanEval/10", "completion": "    n = len(string)\n    if n == 0:\n        return ''\n    \n    for i in range(n, -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i-1::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result\n\n\ndef binary_xor_list(lst: List[str]) -> str:\n    \"\"\" Input is a list of binary strings.\n    Perform binary XOR operation on all the strings in the list and return result as a string.\n    >>> binary_xor_list(['010', '110', '101'])\n    '001'\n    \"\"\"\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = string_xor(result, lst[i])\n    return result"}
{"task_id": "HumanEval/12", "completion": "    # Check if the input list is empty\n    if not strings:\n        return None\n    \n    # Find the longest string in the list\n    longest_str = max(strings, key=len)\n    \n    # Return the first longest string in case of multiple strings of the same length\n    for s in strings:\n        if len(s) == len(longest_str):\n            return s\n    \n    return longest_str"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n\nprint(all_prefixes('abc'))"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "    # Convert the string to lowercase to ignore case sensitivity\n    string = string.lower()\n    \n    # Initialize a set to store unique characters\n    unique_chars = set()\n    \n    # Iterate through each character in the string and add it to the set\n    for char in string:\n        unique_chars.add(char)\n    \n    # Return the length of the set which gives the number of distinct characters\n    return len(unique_chars)\n\n# Testing the function with examples\nprint(count_distinct_characters('xyzXYZ'))  # Output: 3\nprint(count_distinct_characters('Jerry'))   # Output: 4"}
{"task_id": "HumanEval/17", "completion": "    # Initialize an empty list to store the duration of each note\n    durations = []\n\n    # Split the input music_string by spaces to get individual notes\n    notes = music_string.split()\n\n    # Iterate through each note\n    for note in notes:\n        # Check the type of note and add the corresponding duration to the list\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n\n    return durations"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count\n\nprint(how_many_times('', 'a'))\nprint(how_many_times('aaa', 'a'))\nprint(how_many_times('aaaa', 'aa'))"}
{"task_id": "HumanEval/19", "completion": "    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: num_dict[x])\n    \n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    # Find the smallest and largest numbers in the list\n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    # Apply linear transform to each number in the list\n    rescaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    \n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return None"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    return [x for x in numbers if numbers.count(x) == 1]"}
{"task_id": "HumanEval/27", "completion": "    flipped_string = \"\"\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        elif char.islower():\n            flipped_string += char.upper()\n        else:\n            flipped_string += char\n    return flipped_string\n\nprint(flip_case('Hello')) # 'hELLO'"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "```python\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if set(xs) == {0}:\n        return 0\n    if xs[-1] == 0:\n        return 0\n\n    assert len(xs) % 2 == 0, \"Even number of coefficients required\"\n    assert xs[-1] != 0, \"Largest non-zero coefficient should not be zero\"\n\n    # Find lower and upper bound for zero\n    max_coeff = max(abs(coeff) for coeff in xs)\n    lower_bound = -max_coeff - 1\n    upper_bound = max_coeff + 1\n\n    # Use bisection method to find zero\n    while abs(upper_bound - lower_bound) > 1e-12:\n        mid = (lower_bound + upper_bound) / 2\n        if poly(xs, lower_bound) * poly(xs, mid) <= 0:\n            upper_bound = mid\n        else:\n            lower_bound = mid\n\n    return round((lower_bound + upper_bound) / 2, 10)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```"}
{"task_id": "HumanEval/33", "completion": "    result = []\n    divided_by_three = []\n    \n    for i in range(len(l)):\n        if i % 3 == 0:\n            divided_by_three.append(l[i])\n        else:\n            result.append(l[i])\n    \n    divided_by_three.sort()\n    \n    j = 0\n    k = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.insert(i, divided_by_three[j])\n            j += 1\n            \n    return result"}
{"task_id": "HumanEval/34", "completion": "    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count\n\n# Revised solution\ndef fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i) or i == 7:\n            count += 1\n    return count \n\n# Test cases\nprint(fizz_buzz(50))  # 0\nprint(fizz_buzz(78))  # 2\nprint(fizz_buzz(79))  # 3\nprint(fizz_buzz(11))  # 1\nprint(fizz_buzz(22))  # 1\nprint(fizz_buzz(7))   # 1\nprint(fizz_buzz(11))  # 1"}
{"task_id": "HumanEval/37", "completion": "    even_values = sorted([val for idx, val in enumerate(l) if idx % 2 == 0])\n    sorted_l = [val if idx % 2 != 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return sorted_l"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b = 0, 1\n            for i in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(fib(i)):\n            count += 1\n\n    return fib(i)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) / 2  # The total number of collisions is given by n choose 2, which is n(n-1)/2."}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Check if there are at least two distinct elements in the list\n    if len(l) < 2:\n        return False\n    \n    # Loop through the list and check if the sum of any two distinct elements is zero\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if base < 2 or base > 9:\n        return \"Base must be between 2 and 9\"\n    \n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    \n    return result\n\nprint(change_base(8, 3))  # '22'\nprint(change_base(8, 2))  # '1000'\nprint(change_base(7, 2))  # '111'"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h\n\nprint(triangle_area(5, 3))"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_nums = [0, 0, 2, 0]\n    \n    for i in range(4, n+1):\n        fib_nums[i % 4] = fib_nums[(i-1) % 4] + fib_nums[(i-2) % 4] + fib_nums[(i-3) % 4] + fib_nums[(i-4) % 4]\n    \n    return fib_nums[n % 4]"}
{"task_id": "HumanEval/47", "completion": "    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    if n % 2 == 0:\n        middle1 = sorted_list[n//2 - 1]\n        middle2 = sorted_list[n//2]\n        return (middle1 + middle2) / 2\n    else:\n        return sorted_list[n//2]"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower()\n    text = ''.join(e for e in text if e.isalnum())\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True\n\n# Running doctests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    \n    return len(stack) == 0\n\nprint(correct_bracketing(\"<\"))\nprint(correct_bracketing(\"<>\"))\nprint(correct_bracketing(\"<<><>>\"))\nprint(correct_bracketing(\"><<>\"))"}
{"task_id": "HumanEval/57", "completion": "    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing"}
