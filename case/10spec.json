["def preconditions(arr):\n    \"\"\"\n    Checks whether the input array satisfies the given constraints.\n\n    Preconditions:\n    - The input arr should be a list.\n    - The length of arr should be between 1 and 10000, inclusive.\n    - All elements in arr should be non-negative integers.\n\n    Raises:\n    - AssertionError if the input arr is not a list.\n    - AssertionError if the length of arr is not between 1 and 10000, inclusive.\n    - AssertionError if any element in arr is not a non-negative integer.\n    \"\"\"\n    assert isinstance(arr, list), \"Input is not a list.\"\n    assert 1 <= len(arr) <= 10000, \"Length of arr is not between 1 and 10000.\"\n    assert all([isinstance(i, int) and i >= 0 for i in arr]), \"There are elements in arr that are not non-negative integers.\"\n\n\ndef postconditions(arr, output):\n    \"\"\"\n    Checks the functional relationships between the input arr and the output.\n\n    Postconditions:\n    - The output should be a list.\n    - The length of the output should be either 0 or 2.\n    - If the length of the output is 2, the first element should be the smallest even value in arr.\n    - If the length of the output is 2, the second element should be the index of the smallest even value in arr.\n    - If there are multiple nodes with the same smallest even value, the index of the first occurrence should be returned.\n\n    Raises:\n    - AssertionError if the output is not a list.\n    - AssertionError if the length of the output is not 0 or 2.\n    - AssertionError if the first element of the output is not the smallest even value in arr.\n    - AssertionError if the second element of the output is not the index of the smallest even value in arr.\n    - AssertionError if there are multiple nodes with the same smallest even value and the index of the first occurrence is not returned.\n    \"\"\"\n    assert isinstance(output, list), \"Output is not a list.\"\n    assert len(output) == 0 or len(output) == 2, \"Length of output is not 0 or 2.\"\n\n    if len(output) == 2:\n        smallest_even = min([i for i in arr if i % 2 == 0])\n        index = arr.index(smallest_even)\n        assert output[0] == smallest_even, \"First element of output is not the smallest even value in arr.\"\n        assert output[1] == index, \"Second element of output is not the index of the smallest even value in arr.\"\n\n        if arr.count(smallest_even) > 1:\n            index_first_occurrence = arr.index(smallest_even)\n            assert output[1] == index_first_occurrence, \"Index of the first occurrence of the smallest even value is not returned.\"", "def preconditions(arr):\n    assert isinstance(arr, list), \"Input is not a list.\"\n    assert all([isinstance(i, int) and i >= 0 for i in arr]), \"There are elements in input that are not non-negative integers.\"\n\ndef postconditions(arr, output):\n    assert isinstance(output, list), \"Output is not a list.\"\n    if len(output) == 0:\n        return\n    assert len(output) == 2, \"Output does not have two elements.\"\n    assert isinstance(output[0], int) and isinstance(output[1], int), \"Elements in output are not integers.\"\n    assert output[0] % 2 == 0, \"First element in output is not even.\"\n    assert output[0] in arr, \"First element in output is not in the input list.\"\n    assert output[0] == min([i for i in arr if i % 2 == 0]), \"First element in output is not the smallest even value in the input list.\"\n    assert output[1] >= 0 and output[1] < len(arr), \"Second element in output is not a valid index for the input list.\"\n    assert arr[output[1]] == output[0], \"Element at the index in the input list does not match the first element in output.\"", "def preconditions(arr):\n    \"\"\"\n    Preconditions:\n    - Check if arr is a list.\n    - Check if all elements in arr are non-negative integers.\n    \"\"\"\n    assert isinstance(arr, list), \"Input is not a list.\"\n    assert all([isinstance(i, int) and i >= 0 for i in arr]), \"There are elements in input that are not non-negative integers.\"\n\n\ndef postconditions(arr, output):\n    \"\"\"\n    Postconditions:\n    - Check if output is a list.\n    - Check if output contains two elements, the smallest even value and its index.\n    - Check if the smallest even value in output is the smallest even value in arr.\n    - Check if the index of the smallest even value in output is the smallest index in arr for the smallest even value.\n    \"\"\"\n    assert isinstance(output, list), \"Output is not a list.\"\n    assert len(output) == 2, \"Output does not contain two elements.\"\n    \n    smallest_even = None\n    smallest_even_index = float('inf')\n    \n    for i, value in enumerate(arr):\n        if value % 2 == 0 and (smallest_even is None or value < smallest_even):\n            smallest_even = value\n            smallest_even_index = i\n\n    if smallest_even is None:\n        assert output == [], \"Output is not an empty list when there are no even values in arr.\"\n    else:\n        assert output[0] == smallest_even, \"The smallest even value in output is not the smallest even value in arr.\"\n        assert output[1] == smallest_even_index, \"The index of the smallest even value in output is not the smallest index in arr for the smallest even value.\"", "def preconditions(arr):\n    assert isinstance(arr, list), \"Input is not a list.\"\n    assert all([isinstance(i, int) and i >= 0 for i in arr]), \"There are elements in the input that are not non-negative integers.\"\ndef postconditions(arr, output):\n    assert isinstance(output, list), \"Output is not a list.\"\n    assert len(output) <= 2, \"Output list has more than 2 elements.\"\n    if len(output) == 2:\n        assert isinstance(output[0], int) and output[0] >= 0, \"The first element of the output list is not a non-negative integer.\"\n        assert isinstance(output[1], int) and output[1] >= 0, \"The second element of the output list is not a non-negative integer.\"\n    if len(arr) > 0:\n        if any([i % 2 == 0 for i in arr]):\n            even_values = [i for i in arr if i % 2 == 0]\n            min_even = min(even_values)\n            indices = [i for i, x in enumerate(arr) if x == min_even]\n            min_index = min(indices)\n            assert output == [min_even, min_index], \"Output is not the expected value.\"\n        else:\n            assert output == [], \"Output is not the expected value.\"\n    else:\n        assert output == [], \"Output is not the expected value.\"", "def preconditions(arr):\n    assert isinstance(arr, list), \"Input is not a list.\"\n    assert all(isinstance(i, int) and i >= 0 for i in arr), \"There are elements in input that are not non-negative integers.\"\n\ndef postconditions(arr, output):\n    assert isinstance(output, list), \"Output is not a list.\"\n    assert len(output) <= 2, \"Output list should have at most 2 elements.\"\n    if len(output) == 2:\n        assert isinstance(output[0], int) and isinstance(output[1], int), \"Elements of output list should be integers.\"\n        assert output[0] >= 0, \"First element of output list should be non-negative.\"\n        assert 0 <= output[1] < len(arr), \"Second element of output list should be a valid index for the input array.\"\n    if len(arr) == 0 or all(i % 2 != 0 for i in arr):\n        assert output == [], \"Output should be an empty list if there are no even values in the input array.\"\n    else:\n        smallest_even = min(i for i in arr if i % 2 == 0)\n        indices = [i for i, x in enumerate(arr) if x == smallest_even]\n        assert output[0] == smallest_even, \"First element of output list should be the smallest even value in the input array.\"\n        assert output[1] == min(indices), \"Second element of output list should be the index of the smallest even value with the smallest index.\"", "def preconditions(arr):\n    assert isinstance(arr, list), \"Input is not a list.\"\n    assert all([isinstance(i, int) and i >= 0 for i in arr]), \"There are elements in input that are not non-negative integers.\"\n\ndef postconditions(arr, output):\n    assert isinstance(output, list), \"Output is not a list.\"\n    assert len(output) <= 2, \"Output should be a list with at most two elements.\"\n    if len(output) == 2:\n        assert isinstance(output[0], int) and isinstance(output[1], int), \"Elements in output should be integers.\"\n        assert output[0] >= 0, \"The first element in output should be a non-negative integer.\"\n        assert output[1] >= 0, \"The second element in output should be a non-negative integer.\"\n        assert output[1] < len(arr), \"The second element in output exceeds the index range of the input list.\"\n        assert arr[output[1]] == output[0], \"The node value at the specified index is not equal to the first element in output.\"\n    else:\n        assert output == [], \"Output should be an empty list if no even values are found or the input list is empty.\"", "def preconditions(arr):\n    \"\"\"\n    Check the preconditions for the pluck function.\n\n    Preconditions:\n    - arr must be a list\n    - all elements in arr must be non-negative integers\n    \"\"\"\n    assert isinstance(arr, list), \"Input is not a list.\"\n    assert all([isinstance(i, int) and i >= 0 for i in arr]), \"There are elements in input that are not non-negative integers.\"\n\n\ndef postconditions(arr, output):\n    \"\"\"\n    Check the postconditions for the pluck function.\n\n    Postconditions:\n    - output must be a list\n    - if arr is empty or there are no even values in arr, output must be an empty list\n    - if there are even values in arr, output must be a list of length 2\n    - the first element in output must be the smallest even value in arr\n    - the second element in output must be the index of the smallest even value in arr\n    - if there are multiple nodes with the same smallest even value, the index of the first occurrence must be returned\n    \"\"\"\n    assert isinstance(output, list), \"Output is not a list.\"\n    \n    if len(arr) == 0 or all([i % 2 != 0 for i in arr]):\n        assert output == [], \"Output is not an empty list when arr is empty or there are no even values.\"\n    else:\n        assert len(output) == 2, \"Output does not have length 2.\"\n        assert output[0] == min([i for i in arr if i % 2 == 0]), \"First element in output is not the smallest even value.\"\n        assert output[1] == arr.index(output[0]), \"Second element in output is not the index of the smallest even value.\"", "def preconditions(arr):\n    assert isinstance(arr, list), \"Input is not a list.\"\n    assert all([isinstance(i, int) and i >= 0 for i in arr]), \"There are elements in input that are not non-negative integers.\"\n\ndef postconditions(arr, output):\n    assert isinstance(output, list), \"Output is not a list.\"\n    assert len(output) <= 2, \"Output list should have at most 2 elements.\"\n    assert all([isinstance(i, int) for i in output]), \"There are elements in output that are not integers.\"\n    assert (len(output) == 0) or (len(output) == 2), \"Output list should be empty or contain two elements.\"\n    if len(output) == 2:\n        assert output[0] % 2 == 0, \"The first element in output list is not even.\"\n        assert output[1] >= 0, \"The second element in output list is negative.\"\n        assert output[1] < len(arr), \"The second element in output list exceeds the range of the input list.\"\n        assert arr[output[1]] == output[0], \"The output is not the node with the smallest even value and smallest index.\"", "# Problem:\n\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n\n# Specification:\n\ndef preconditions(arr):\n    \"\"\"\n    Check if the input array satisfies the specified constraints.\n\n    Parameters:\n    arr (list): The input array representing a branch of a tree with non-negative integer nodes.\n\n    Raises:\n    AssertionError: If the input is not a list or if it contains elements that are not non-negative integers.\n\n    Returns:\n    None\n    \"\"\"\n    assert isinstance(arr, list), \"Input is not a list.\"\n    assert all([isinstance(i, int) and i >= 0 for i in arr]), \"There are elements in input that are not non-negative integers.\"\n\n\ndef postconditions(arr, output):\n    \"\"\"\n    Check if the output satisfies the specified constraints.\n\n    Parameters:\n    arr (list): The input array representing a branch of a tree with non-negative integer nodes.\n    output (list): The output list containing the smallest even value and its index.\n\n    Raises:\n    AssertionError: If the output is not a list or if it does not satisfy the requirements.\n\n    Returns:\n    None\n    \"\"\"\n    assert isinstance(output, list), \"Output is not a list.\"\n    if len(arr) == 0 or all([i % 2 != 0 for i in arr]):\n        assert output == [], \"Output should be an empty list when there are no even values or the input array is empty.\"\n    else:\n        min_even = float('inf')\n        min_index = len(arr)\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0 and arr[i] < min_even:\n                min_even = arr[i]\n                min_index = i\n        assert output == [min_even, min_index], \"Output does not contain the smallest even value and its index.\"", "def preconditions(arr):\n    assert isinstance(arr, list), \"Input is not a list.\"\n    assert all([isinstance(i, int) for i in arr]), \"There are elements in input that are not of type int.\"\n    assert all([i >= 0 for i in arr]), \"There are negative elements in input.\"\ndef postconditions(arr, output):\n    assert isinstance(output, list), \"Output is not a list.\"\n    assert len(output) <= 2, \"Output contains more than two elements.\"\n    if len(output) == 2:\n        assert isinstance(output[0], int), \"First element of output is not of type int.\"\n        assert isinstance(output[1], int), \"Second element of output is not of type int.\"\n        assert output[1] < len(arr), \"Index of plucked node is out of range.\"\n        assert output[0] == min([i for i in arr if i % 2 == 0]), \"Plucked node is not the smallest even value.\"\n    else:\n        assert output == [], \"Output is not an empty list when there are no even values or the input is empty.\""]