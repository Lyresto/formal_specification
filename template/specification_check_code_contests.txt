import ast
import copy
import random
import re
import threading
import time
from typing import Any, Set, List, Dict, Tuple, Optional
import math
import threading


def get_step_num():
    choose_num = random.randint(0, 2 ** max_step - 2)
    for choose_step in range(max_step, 0, -1):
        if choose_num <= (2 ** (max_step - choose_step) - 1) * 2:
            return choose_step


def generate_improper_testcases(case_in, case_out):
    case_in = copy.copy(case_in)
    case_out = copy.copy(case_out)
    while (case_in, case_out) in standard_testcases:
        for __i in range(len(case_in)):
            case_in[__i] = filter_empty(randomly_modify_single(case_in[__i], steps=get_step_num()))
        for __i in range(len(case_out)):
            case_out[__i] = filter_empty(randomly_modify_single(case_out[__i], steps=get_step_num()))
    return case_in, case_out


def filter_empty(var):
    var = list(filter(lambda x: not isinstance(x, list) or len(x) > 0, var))
    for i, it in enumerate(var):
        if isinstance(it, list):
            var[i] = list(filter(lambda x: x != '', it))
    return var


printable_ch = [chr(ch) for ch in range(32, 127)]
base_data = [0, 0.0, "", False, None]


def unique_length(it):
    return len(set([str(i) for i in it]))


def get_seed_data(it):
    it = list(it)
    if len(it) >= 1:
        return it[random.randint(0, len(it) - 1)]
    else:
        return base_data[random.randint(0, len(base_data) - 1)]


def randomly_modify_single(var: Any, is_character=False, steps=1):
    var = copy.copy(var)
    if steps > 1:
        var = randomly_modify_single(var, steps=steps - 1)
    if random.randint(0, int(1 / keep_rate) - 1) == 0:
        return var
    if var is None:
        return 0
    if isinstance(var, str):
        if len(var) == 1 and is_character:
            new_ch_idx = random.randint(0, len(printable_ch) - 2)
            if new_ch_idx >= printable_ch.index(var):
                new_ch_idx += 1
            return printable_ch[new_ch_idx]
        else:
            new_str = randomly_modify_single(list(var), True)
            if new_str is None or None in new_str:
                return None
            return ''.join(new_str)
    if isinstance(var, bool):
        return not var
    if isinstance(var, int):
        candidate = list({var - 1, var + 1, var - 2, var + 2, -var, var * 2, var // 2, 0} - {var})
        return candidate[random.randint(0, len(candidate) - 1)]
    if isinstance(var, float):
        decimal_len = len(str(var).split('.')[1])
        min_unit = 10 ** -decimal_len
        candidate = list({var - 1, var + 1, var - 2, var + 2, var + 5 * min_unit, var - 5 * min_unit,
                          var + min_unit, var - min_unit, round(var, decimal_len - 1),
                          -var, var * 2, var / 2, 0} - {var})
        return round(candidate[random.randint(0, len(candidate) - 1)], decimal_len)

    # 增、修改、删、交换
    if (isinstance(var, list) or isinstance(var, tuple)) and unique_length(var) >= 2:
        candidate = [1, 1, 1, 1]
        if isinstance(var, tuple) and len(var) == 2:
            candidate = [1, 1, 0, 1]
    elif (not isinstance(var, tuple) and len(var) >= 1) or (isinstance(var, tuple) and len(var) not in [0, 2]):
        candidate = [1, 1, 1, 0]
    elif len(var) >= 1:
        candidate = [1, 1, 0, 0]
    else:
        candidate = [1, 0, 0, 0]

    index = random.randint(0, sum(candidate) - 1)
    operation = 0
    for op, sign in enumerate(candidate):
        if sign == 1:
            if index == 0:
                operation = op
                break
            index -= 1

    empty = random.randint(0, int(1 / empty_rate) - 1) == 0 and len(var) > 0

    if isinstance(var, list) or isinstance(var, tuple):
        origin_type = type(var)
        if isinstance(var, tuple):
            var = list(var)
        if empty:
            var = []
        elif operation == 0:
            for _ in range(2 if origin_type == tuple and len(var) == 0 else 1):
                if is_character:
                    seed_data = " "
                else:
                    seed_data = get_seed_data(var)
                insert_index = random.randint(0, len(var))
                var.insert(insert_index, randomly_modify_single(seed_data, is_character))
        elif operation == 1:
            update_index = random.randint(0, len(var) - 1)
            var[update_index] = randomly_modify_single(var[update_index], is_character)
        elif operation == 2:
            del var[random.randint(0, len(var) - 1)]
        else:
            unique_set_str = list(set([str(item) for item in var]))
            swap_indexes = random.sample(range(len(unique_set_str)), 2)
            for i, index in enumerate(swap_indexes):
                for j, item in enumerate(var):
                    if str(item) == unique_set_str[index]:
                        swap_indexes[i] = j
                        break
            assert str(var[swap_indexes[0]]) != str(var[swap_indexes[1]])
            var[swap_indexes[0]], var[swap_indexes[1]] = var[swap_indexes[1]], var[swap_indexes[0]]
        if origin_type == tuple:
            var = tuple(var)
        return var
    if isinstance(var, set):
        if empty:
            var = {}
        elif operation == 0:
            length = len(var)
            iter_count = 0
            while len(var) == length:
                seed_data = get_seed_data(var)
                if iter_count >= 10:
                    seed_data = get_seed_data(base_data)
                var.add(randomly_modify_single(seed_data))
                iter_count += 1
        elif operation == 1:
            lst = list(var)
            update_index = random.randint(0, len(lst) - 1)
            lst[update_index] = randomly_modify_single(lst[update_index])
            var = set(lst)
        else:
            lst = list(var)
            var.remove(lst[random.randint(0, len(lst) - 1)])
        return var
    if isinstance(var, dict):
        if empty:
            var = dict()
        elif operation == 0:
            iter_count = 0
            while True:
                key_seed_data = get_seed_data(var.keys())
                if iter_count >= 10:
                    key_seed_data = get_seed_data(base_data)
                value_seed_data = get_seed_data(var.values())
                new_key = randomly_modify_single(key_seed_data)
                if new_key in var:
                    iter_count += 1
                    continue
                var[new_key] = randomly_modify_single(value_seed_data)
                break
        elif operation == 1:
            lst = list(var.items())
            update_index = random.randint(0, len(lst) - 1)
            var[lst[update_index][0]] = randomly_modify_single(lst[update_index][1])
        else:
            lst = list(var.keys())
            del var[lst[random.randint(0, len(lst) - 1)]]
        return var
    else:
        raise NotImplementedError()


# [TO REPLACE] standard_testcases


# [TO REPLACE] specification


def validate_test_cases_with_timeout(case_in, case_out, timeout=10):

    __result = [0]
    __message = [""]

    def validate_test_cases():
        try:
            preconditions(*case_in)
            postconditions(*case_in, *case_out)

            __result[0] = 1
            __message[0] = ""
        except Exception as e:
            __result[0] = 0
            __message[0] = f"{e}"

    thread = threading.Thread(target=validate_test_cases)
    thread.setDaemon(True)
    start_time = time.time()
    thread.start()
    thread.join(timeout)
    if thread.is_alive():
        raise TimeoutError()
    return __result[0], __message[0], time.time() - start_time

def parse_terminal_io(io: str):
    if not isinstance(io, str):
        return io
    parsed_io = []

    def __convert_str_2_var(s):
        try:
            return ast.literal_eval(s)
        except ValueError:
            return s
        except SyntaxError:
            return s

    for line in io.split('\n'):
        if len(line.strip()) == 0:
            continue
        parsed_io.append(list(map(__convert_str_2_var, filter(lambda s: len(s) > 0, line.split(' ')))))
    return parsed_io


def to_terminal_io(io: list[list[Any]]):
    try:
        return '\n'.join(' '.join(str(elem) for elem in line) for line in io)
    except TypeError:
        return to_terminal_io([io])


if __name__ == '__main__':
    generate_num_per_testcase = 10000
    empty_rate = 0.1
    keep_rate = 0.2
    max_step = 4
    max_time_spend = 120

    pass_num_proper = 0
    pass_num_improper = 0
    proper_testcase_error_message = []
    improper_testcase_pass_spec = []
    case_out_set = set()
    different_case_in_cnt = 0
    random_testcase_cnt = 0
    total_time_spend = 0
    if len(standard_testcases) == 0:
        print([1.0, 1.0, [], []])
    for testcase in standard_testcases:
        result, message, _ = validate_test_cases_with_timeout([to_terminal_io(testcase[0][0])], [to_terminal_io(testcase[1][0])])
        if result == 0:
            proper_testcase_error_message.append((*testcase, message))
        pass_num_proper += result
    for _ in range(generate_num_per_testcase):
        for testcase in standard_testcases:
            improper_testcase = generate_improper_testcases(*testcase)
            if improper_testcase[0] != testcase[0]:
                different_case_in_cnt += 1
            case_out_set.add(str(improper_testcase[1]))
            improper_testcase = ([to_terminal_io(improper_testcase[0][0])], [to_terminal_io(improper_testcase[1][0])])
            result, _, spend = validate_test_cases_with_timeout(*improper_testcase)
            total_time_spend += spend
            if total_time_spend >= max_time_spend:
                break
            if result == 1 and improper_testcase not in improper_testcase_pass_spec:
                improper_testcase_pass_spec.append(improper_testcase)
            pass_num_improper += result
            random_testcase_cnt += 1
        if total_time_spend >= max_time_spend:
            break
    collision_rate = different_case_in_cnt / random_testcase_cnt / len(case_out_set)
    random_testcase_pass_rate = 1 - pass_num_improper / random_testcase_cnt
    print([pass_num_proper / len(standard_testcases),
           min(1.0, random_testcase_pass_rate + 1.5 * collision_rate),
           proper_testcase_error_message,
           random.sample(improper_testcase_pass_spec, min(5, len(improper_testcase_pass_spec)))
          if len(improper_testcase_pass_spec) > 0 else []])